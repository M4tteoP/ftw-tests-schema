// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.
// DO NOT EDIT: this file is automatically generated by docgen
package main

import (
	"github.com/projectdiscovery/yamldoc-go/encoder"
)

var (
	FTWTestDoc encoder.Doc
	MetaDoc    encoder.Doc
	TestDoc    encoder.Doc
	StageDoc   encoder.Doc
	InputDoc   encoder.Doc
	OutputDoc  encoder.Doc
)

func init() {
	FTWTestDoc.Type = "FTWTest"
	FTWTestDoc.Comments[encoder.LineComment] = "Welcome to the FTW YAMLFormat documentation."
	FTWTestDoc.Description = "Welcome to the FTW YAMLFormat documentation.\nIn this document we will explain all the possible options that can be used within the YAML format.\nGenerally this is the preferred format for writing tests in as they don't require any programming skills\nin order to understand and change. If you find a bug in this format please open an issue.\n\nFTWTest is the base type used when unmarshaling YAML tests files\n"
	FTWTestDoc.Fields = make([]encoder.Doc, 3)
	FTWTestDoc.Fields[0].Name = "meta"
	FTWTestDoc.Fields[0].Type = "Meta"
	FTWTestDoc.Fields[0].Note = ""
	FTWTestDoc.Fields[0].Description = "description: |\nMeta describes the metadata information of this yaml test file\n"
	FTWTestDoc.Fields[0].Comments[encoder.LineComment] = "description: |"
	FTWTestDoc.Fields[1].Name = "filename"
	FTWTestDoc.Fields[1].Type = "string"
	FTWTestDoc.Fields[1].Note = ""
	FTWTestDoc.Fields[1].Description = "description: |\nFileName is the name of the file where these tests are.\nexamples:\n  - name: FileName\n    value: test-1234.yaml\n"
	FTWTestDoc.Fields[1].Comments[encoder.LineComment] = "description: |"
	FTWTestDoc.Fields[2].Name = "tests"
	FTWTestDoc.Fields[2].Type = "[]Test"
	FTWTestDoc.Fields[2].Note = ""
	FTWTestDoc.Fields[2].Description = "description: |\nTests is a list of FTW tests\nexamples:\n  - name: Tests\n    value: the tests\n"
	FTWTestDoc.Fields[2].Comments[encoder.LineComment] = "description: |"

	MetaDoc.Type = "Meta"
	MetaDoc.Comments[encoder.LineComment] = "Meta describes the metadata information of this yaml test file"
	MetaDoc.Description = "Meta describes the metadata information of this yaml test file"
	MetaDoc.AppearsIn = []encoder.Appearance{
		{
			TypeName:  "FTWTest",
			FieldName: "meta",
		},
	}
	MetaDoc.Fields = make([]encoder.Doc, 5)
	MetaDoc.Fields[0].Name = "author"
	MetaDoc.Fields[0].Type = "string"
	MetaDoc.Fields[0].Note = ""
	MetaDoc.Fields[0].Description = "description: |\nAuthor is the list of authors that added content to this file\nexamples:\n  - name: Author\n    value: Felipe Zipitria\n"
	MetaDoc.Fields[0].Comments[encoder.LineComment] = "description: |"
	MetaDoc.Fields[1].Name = "enabled"
	MetaDoc.Fields[1].Type = "bool"
	MetaDoc.Fields[1].Note = ""
	MetaDoc.Fields[1].Description = "description: |\nEnabled indicates if the tests are enabled to be run by the engine or not.\nexamples:\n  - name: Enabled\n    value: false\n"
	MetaDoc.Fields[1].Comments[encoder.LineComment] = "description: |"
	MetaDoc.Fields[2].Name = "name"
	MetaDoc.Fields[2].Type = "string"
	MetaDoc.Fields[2].Note = ""
	MetaDoc.Fields[2].Description = "description: |\nName is the name of the tests contained in this file.\nexamples:\n  - name: Name\n    value: test01\n"
	MetaDoc.Fields[2].Comments[encoder.LineComment] = "description: |"
	MetaDoc.Fields[3].Name = "description"
	MetaDoc.Fields[3].Type = "string"
	MetaDoc.Fields[3].Note = ""
	MetaDoc.Fields[3].Description = "description: |\nDescription is a textual description of the tests contained in this file.\nexamples:\n  - name: Description\n    value: The tests here target SQL injection.\n"
	MetaDoc.Fields[3].Comments[encoder.LineComment] = "description: |"
	MetaDoc.Fields[4].Name = "version"
	MetaDoc.Fields[4].Type = "string"
	MetaDoc.Fields[4].Note = ""
	MetaDoc.Fields[4].Description = "description: |\nVersion is the version of the YAML Schema.\nexamples:\n  - name: Version\n    value: v1\n"
	MetaDoc.Fields[4].Comments[encoder.LineComment] = "description: |"

	TestDoc.Type = "Test"
	TestDoc.Comments[encoder.LineComment] = "Test is an individual test"
	TestDoc.Description = "Test is an individual test"
	TestDoc.AppearsIn = []encoder.Appearance{
		{
			TypeName:  "FTWTest",
			FieldName: "tests",
		},
	}
	TestDoc.Fields = make([]encoder.Doc, 3)
	TestDoc.Fields[0].Name = "test_title"
	TestDoc.Fields[0].Type = "string"
	TestDoc.Fields[0].Note = ""
	TestDoc.Fields[0].Description = "description: |\nTestTitle the title of this particular test. It is used for inclusion/exclusion of each run by the tool.\nexamples:\n  - name: TestTitle\n    value: 920100-1\n"
	TestDoc.Fields[0].Comments[encoder.LineComment] = "description: |"
	TestDoc.Fields[1].Name = "desc"
	TestDoc.Fields[1].Type = "string"
	TestDoc.Fields[1].Note = ""
	TestDoc.Fields[1].Description = "description: |\nTestDescription is the description for this particular test. Should be used to describe the internals of\nthe specific things this test is targeting.\nexamples:\n  - name: TestDescription\n    value: This test targets something\n"
	TestDoc.Fields[1].Comments[encoder.LineComment] = "description: |"
	TestDoc.Fields[2].Name = "stages"
	TestDoc.Fields[2].Type = "[]Stage"
	TestDoc.Fields[2].Note = ""
	TestDoc.Fields[2].Description = "description: |\nStages is the list of all the stages to perform this test.\n"
	TestDoc.Fields[2].Comments[encoder.LineComment] = "description: |"

	StageDoc.Type = "Stage"
	StageDoc.Comments[encoder.LineComment] = "Stage is an individual test stage"
	StageDoc.Description = "Stage is an individual test stage"
	StageDoc.AppearsIn = []encoder.Appearance{
		{
			TypeName:  "Test",
			FieldName: "stages",
		},
	}
	StageDoc.Fields = make([]encoder.Doc, 2)
	StageDoc.Fields[0].Name = "input"
	StageDoc.Fields[0].Type = "Input"
	StageDoc.Fields[0].Note = ""
	StageDoc.Fields[0].Description = "description: |\nInput is the data that is passed to the test\nexamples:\n  - name: Input\n    value: test\n"
	StageDoc.Fields[0].Comments[encoder.LineComment] = "description: |"
	StageDoc.Fields[1].Name = "output"
	StageDoc.Fields[1].Type = "Output"
	StageDoc.Fields[1].Note = ""
	StageDoc.Fields[1].Description = "description: |\nOutput is the data that is returned from the test\nexamples:\n  - name: Output\n    value: test\n"
	StageDoc.Fields[1].Comments[encoder.LineComment] = "description: |"

	InputDoc.Type = "Input"
	InputDoc.Comments[encoder.LineComment] = "Input represents the input request in a stage"
	InputDoc.Description = "Input represents the input request in a stage\nThe fields `Version`, `Method` and `URI` we want to explicitly now when they are set to \"\"\n"
	InputDoc.AppearsIn = []encoder.Appearance{
		{
			TypeName:  "Stage",
			FieldName: "input",
		},
	}
	InputDoc.Fields = make([]encoder.Doc, 11)
	InputDoc.Fields[0].Name = "dest_addr"
	InputDoc.Fields[0].Type = "string"
	InputDoc.Fields[0].Note = ""
	InputDoc.Fields[0].Description = "description: |\nDestAddr is the IP of the destination host that the test will send the message to.\nexamples:\n  - name: DestAddr\n    value: \"127.0.0.1\"\n"
	InputDoc.Fields[0].Comments[encoder.LineComment] = "description: |"
	InputDoc.Fields[1].Name = "port"
	InputDoc.Fields[1].Type = "int"
	InputDoc.Fields[1].Note = ""
	InputDoc.Fields[1].Description = "description: |\nPort allows you to declare which port on the destination host the tests should connect to.\nexamples:\n  - name: Port\n    value: 80\n"
	InputDoc.Fields[1].Comments[encoder.LineComment] = "description: |"
	InputDoc.Fields[2].Name = "protocol"
	InputDoc.Fields[2].Type = "string"
	InputDoc.Fields[2].Note = ""
	InputDoc.Fields[2].Description = "description: |\nProtocol allows you to declare which port on the destination host the tests should connect to.\nexamples:\n  - name: Protocol\n    value: 80\n"
	InputDoc.Fields[2].Comments[encoder.LineComment] = "description: |"
	InputDoc.Fields[3].Name = "uri"
	InputDoc.Fields[3].Type = "string"
	InputDoc.Fields[3].Note = ""
	InputDoc.Fields[3].Description = "description: |\nURI allows you to declare which port on the destination host the tests should connect to.\nexamples:\n  - name: URI\n    value: \"/get?hello=world\"\n"
	InputDoc.Fields[3].Comments[encoder.LineComment] = "description: |"
	InputDoc.Fields[4].Name = "version"
	InputDoc.Fields[4].Type = "string"
	InputDoc.Fields[4].Note = ""
	InputDoc.Fields[4].Description = "description: |\nVersion it the HTTP version used.\nexamples:\n  - name: Version\n    value: \"1.1\"\n"
	InputDoc.Fields[4].Comments[encoder.LineComment] = "description: |"
	InputDoc.Fields[5].Name = "method"
	InputDoc.Fields[5].Type = "string"
	InputDoc.Fields[5].Note = ""
	InputDoc.Fields[5].Description = "description: |\nHeaders is a map of headers to be sent.\nexamples:\n  - name: Headers\n    value: list\nHeaders ftwhttp.Header `yaml:\"headers,omitempty\" koanf:\"headers,omitempty\"`\ndescription: |\nMethod allows you to declare which port on the destination host the tests should connect to.\nexamples:\n  - name: Method\n    value: \"GET\"\n"
	InputDoc.Fields[5].Comments[encoder.LineComment] = "description: |"
	InputDoc.Fields[6].Name = "data"
	InputDoc.Fields[6].Type = "string"
	InputDoc.Fields[6].Note = ""
	InputDoc.Fields[6].Description = "description: |\nData allows you to declare which port on the destination host the tests should connect to.\nexamples:\n  - name: Data\n    value: \"Bibitti bopi\"\n"
	InputDoc.Fields[6].Comments[encoder.LineComment] = "description: |"
	InputDoc.Fields[7].Name = "save_cookie"
	InputDoc.Fields[7].Type = "bool"
	InputDoc.Fields[7].Note = ""
	InputDoc.Fields[7].Description = "description: |\nSaveCookie allows you to declare which port on the destination host the tests should connect to.\nexamples:\n  - name: SaveCookie\n    value: 80\n"
	InputDoc.Fields[7].Comments[encoder.LineComment] = "description: |"
	InputDoc.Fields[8].Name = "stop_magic"
	InputDoc.Fields[8].Type = "bool"
	InputDoc.Fields[8].Note = ""
	InputDoc.Fields[8].Description = "description: |\nStopMagic allows you to declare which port on the destination host the tests should connect to.\nexamples:\n  - name: StopMagic\n    value: false\n"
	InputDoc.Fields[8].Comments[encoder.LineComment] = "description: |"
	InputDoc.Fields[9].Name = "encoded_request"
	InputDoc.Fields[9].Type = "string"
	InputDoc.Fields[9].Note = ""
	InputDoc.Fields[9].Description = "description: |\nEncodedRequest allows you to declare which port on the destination host the tests should connect to.\nexamples:\n  - name: EncodedRequest\n    value: \"a\"\n"
	InputDoc.Fields[9].Comments[encoder.LineComment] = "description: |"
	InputDoc.Fields[10].Name = "raw_request"
	InputDoc.Fields[10].Type = "string"
	InputDoc.Fields[10].Note = ""
	InputDoc.Fields[10].Description = "description: |\nRAWRequest is deprecated.\nexamples:\n  - name: RAWRequest\n    value: asd\n"
	InputDoc.Fields[10].Comments[encoder.LineComment] = "description: |"

	OutputDoc.Type = "Output"
	OutputDoc.Comments[encoder.LineComment] = "Output is the response expected from the test"
	OutputDoc.Description = "Output is the response expected from the test"
	OutputDoc.AppearsIn = []encoder.Appearance{
		{
			TypeName:  "Stage",
			FieldName: "output",
		},
	}
	OutputDoc.Fields = make([]encoder.Doc, 5)
	OutputDoc.Fields[0].Name = "status"
	OutputDoc.Fields[0].Type = "[]int"
	OutputDoc.Fields[0].Note = ""
	OutputDoc.Fields[0].Description = "description: |\nStatus describes the HTTP status error code expected as response.\nexamples:\n  - name: Status\n    value: [200]\n"
	OutputDoc.Fields[0].Comments[encoder.LineComment] = "description: |"
	OutputDoc.Fields[1].Name = "response_contains"
	OutputDoc.Fields[1].Type = "string"
	OutputDoc.Fields[1].Note = ""
	OutputDoc.Fields[1].Description = "description: |\nResponseContains describes the text that should be contained in the HTTP response.\nexamples:\n  - name: ResponseContains\n    value: \"Hello, World\"\n"
	OutputDoc.Fields[1].Comments[encoder.LineComment] = "description: |"
	OutputDoc.Fields[2].Name = "log_contains"
	OutputDoc.Fields[2].Type = "string"
	OutputDoc.Fields[2].Note = ""
	OutputDoc.Fields[2].Description = "description: |\nLogContains describes the text that should be contained in the WAF logs.\nexamples:\n  - name: LogContains\n    value: `id \"920100\"`\n"
	OutputDoc.Fields[2].Comments[encoder.LineComment] = "description: |"
	OutputDoc.Fields[3].Name = "no_log_contains"
	OutputDoc.Fields[3].Type = "string"
	OutputDoc.Fields[3].Note = ""
	OutputDoc.Fields[3].Description = "description: |\nNoLogContains describes the text that should be contained in the WAF logs.\nexamples:\n  - name: NoLogContains\n    value: `id \"920100\"\n"
	OutputDoc.Fields[3].Comments[encoder.LineComment] = "description: |"
	OutputDoc.Fields[4].Name = "expect_error"
	OutputDoc.Fields[4].Type = "bool"
	OutputDoc.Fields[4].Note = ""
	OutputDoc.Fields[4].Description = "description: |\nExpectError describes the text that should be contained in the WAF logs.\nexamples:\n  - name: ExpectError\n    value: `id \"920100\"\n"
	OutputDoc.Fields[4].Comments[encoder.LineComment] = "description: |"
}

func (_ FTWTest) Doc() *encoder.Doc {
	return &FTWTestDoc
}

func (_ Meta) Doc() *encoder.Doc {
	return &MetaDoc
}

func (_ Test) Doc() *encoder.Doc {
	return &TestDoc
}

func (_ Stage) Doc() *encoder.Doc {
	return &StageDoc
}

func (_ Input) Doc() *encoder.Doc {
	return &InputDoc
}

func (_ Output) Doc() *encoder.Doc {
	return &OutputDoc
}

// GetFTWTestDoc returns documentation for the file types_doc.go.
func GetFTWTestDoc() *encoder.FileDoc {
	return &encoder.FileDoc{
		Name:        "FTWTest",
		Description: "",
		Structs: []*encoder.Doc{
			&FTWTestDoc,
			&MetaDoc,
			&TestDoc,
			&StageDoc,
			&InputDoc,
			&OutputDoc,
		},
	}
}
